name: CI/CD Pipeline

# Trigger do pipeline
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: # Permite execução manual

# Variáveis de ambiente globais
env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: docker-cicd-app
  REGISTRY: ghcr.io

jobs:
  # Job 1: Testes e Quality Checks
  test:
    name: 🧪 Testes e Qualidade
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Instalar dependências
        run: npm ci

      - name: 🔍 Linting (ESLint)
        run: |
          # Instalar ESLint se não estiver no package.json
          npm install --save-dev eslint
          npx eslint . --ext .js --ignore-pattern node_modules/ || true

      - name: 🧪 Executar testes
        run: npm test

      - name: 📊 Cobertura de testes
        run: npm run test:coverage

      - name: 📤 Upload cobertura para Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Job 2: Build da imagem Docker
  build:
    name: 🐳 Build Docker
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login no GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extrair metadados
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build e Push imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Testes de Segurança
  security:
    name: 🔒 Testes de Segurança
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Audit de dependências
        run: npm audit --audit-level=moderate

      - name: 🛡️ Scan de vulnerabilidades com Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload resultados para GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: Deploy Simulado
  deploy:
    name: 🚀 Deploy (Simulado)
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🚀 Simular deploy
        run: |
          echo "🎯 Iniciando deploy para produção..."
          echo "📦 Imagem: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE }}:latest"
          echo "🔄 A atualizar serviços..."
          sleep 5
          echo "✅ Deploy concluído com sucesso!"
          echo "🌐 Aplicação disponível em: https://minha-app.exemplo.com"

      - name: 📊 Verificação de saúde pós-deploy
        run: |
          echo "🏥 A verificar saúde da aplicação..."
          # Aqui farias um curl real para /api/health
          echo "✅ Aplicação saudável!"

      - name: 📢 Notificação de sucesso
        if: success()
        run: |
          echo "✅ Deploy realizado com sucesso!"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Autor: ${{ github.actor }}"
          echo "🕐 Data: $(date)"

  # Job 5: Rollback (em caso de falha)
  rollback:
    name: ⏪ Rollback
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: ⏪ Executar rollback
        run: |
          echo "❌ Deploy falhou! A executar rollback..."
          echo "🔄 A reverter para versão anterior..."
          sleep 3
          echo "✅ Rollback concluído!"