version: '3.8'

services:
  # Aplicação principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: docker-cicd-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      # Volume para logs (opcional)
      - ./logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis para cache (demonstrar multi-container)
  redis:
    image: redis:7-alpine
    container_name: docker-cicd-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como reverse proxy (produção)
  nginx:
    image: nginx:alpine
    container_name: docker-cicd-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production

# Volumes
volumes:
  redis-data:
    driver: local

# Networks
networks:
  app-network:
    driver: bridge